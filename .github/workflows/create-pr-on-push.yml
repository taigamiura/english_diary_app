name: Create Pull Request on Push

on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'

jobs:
  create_pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Debug workflow trigger
        run: |
          echo "🔍 Workflow Debug Information"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得
          
      - name: Fetch development branch
        run: |
          git fetch origin development:development || echo "development branch may not exist yet"

      - name: Get recent commit messages
        id: commits
        run: |
          # developmentブランチが存在する場合は差分を、存在しない場合は直近のコミットを取得
          if git rev-parse --verify development >/dev/null 2>&1; then
            commit_messages="$(git log development..HEAD --pretty=format:"- %h %s (%an)" | head -10)"
          else
            commit_messages="$(git log HEAD --pretty=format:"- %h %s (%an)" | head -5)"
          fi
          
          # ランダムなデリミターを生成して安全にマルチライン出力を設定
          delimiter="ghadelimiter_$(openssl rand -hex 8)"
          {
            echo "messages<<${delimiter}"
            echo "$commit_messages"
            echo "${delimiter}"
          } >> $GITHUB_OUTPUT
          
      - name: Debug commit messages
        run: |
          echo "Commit messages:"
          echo "${{ steps.commits.outputs.messages }}"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"

      - name: Check if there are commits to merge
        id: check_commits
        run: |
          messages="${{ steps.commits.outputs.messages }}"
          if [ -z "$messages" ] || [ "$messages" = "" ]; then
            echo "No commits found"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Found commits, proceeding with PR creation"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if PR already exists
        id: check_pr
        run: |
          # 既存のPRがあるかチェック
          existing_pr=$(gh pr list --head "${{ github.ref_name }}" --base development --json number --jq '.[0].number' || echo "")
          if [ -n "$existing_pr" ] && [ "$existing_pr" != "null" ]; then
            echo "PR already exists: #$existing_pr"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        if: steps.check_commits.outputs.skip == 'false' && steps.check_pr.outputs.exists == 'false'
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: development
          branch: ${{ github.ref_name }}
          title: "🤖 【自動PR】${{ github.ref_name }} → development"
          body: |
            ![auto-pr](https://img.shields.io/badge/auto--pr-generated-blue)

            ## 🤖 自動生成プルリクエスト
            **このPRは `${{ github.ref_name }}` ブランチへのpushを検知して自動生成されました。**

            ---
            ### 📝 概要
            このPRは `${{ github.ref_name }}` での最新の修正・追加内容を `development` ブランチへ反映するためのものです。

            **📤 マージ元ブランチ:** `${{ github.ref_name }}`
            **📥 マージ先ブランチ:** `development`

            ---
            ### 📋 直近のコミット一覧（最大10件）
            ${{ steps.commits.outputs.messages }}

            ---
            ### 👀 レビュワーへのお願い
            - ✅ 変更内容・コミット履歴を確認してください。
            - 💬 必要に応じてコメントや追加修正をお願いします。
            - 🔀 問題なければマージをお願いします。

            ---
            ### ⚠️ 注意事項
            - 🤖 このPRは自動生成です。内容に不備がある場合は手動で修正・クローズしてください。
            - 📢 マージ後、`development` ブランチに変更が反映されます。
          labels: auto-pr
          
      - name: PR Creation Result
        if: always()
        run: |
          if [ "${{ steps.check_commits.outputs.skip }}" = "true" ]; then
            echo "❌ No commits to merge - PR creation skipped"
          elif [ "${{ steps.check_pr.outputs.exists }}" = "true" ]; then
            echo "ℹ️ PR already exists - creation skipped"
          elif [ "${{ steps.create_pr.outcome }}" = "success" ]; then
            echo "✅ PR created successfully"
            echo "PR URL: ${{ steps.create_pr.outputs.pull-request-url }}"
          else
            echo "❌ PR creation failed"
            exit 1
          fi
