name: 🧪 Flutter Tests (Optimized & Fixed)

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
      - 'feature/*'
      - 'bug/*'
      - 'hotfix/*'

permissions:
  contents: read
  pull-requests: write

jobs:
  # 変更されたファイルを検出するジョブ
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      # 各カテゴリに変更があったかどうか
      models-changed: ${{ steps.changes.outputs.models }}
      providers-changed: ${{ steps.changes.outputs.providers }}
      services-changed: ${{ steps.changes.outputs.services }}
      repositories-changed: ${{ steps.changes.outputs.repositories }}
      views-changed: ${{ steps.changes.outputs.views }}
      widgets-changed: ${{ steps.changes.outputs.widgets }}
      utils-changed: ${{ steps.changes.outputs.utils }}
      # テスト戦略を決定
      test-strategy: ${{ steps.strategy.outputs.strategy }}
      
    steps:
      - name: 📂 チェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得して変更を検出
          
      - name: 🔍 変更検出
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            models:
              - 'lib/models/**'
            providers:
              - 'lib/providers/**'
            services:
              - 'lib/services/**'
            repositories:
              - 'lib/repositories/**'
            views:
              - 'lib/views/**'
            widgets:
              - 'lib/widgets/**'
            utils:
              - 'lib/utils/**'
            config:
              - 'pubspec.yaml'
              - 'pubspec.lock'
              - '.github/workflows/**'
            
      - name: 🎯 テスト戦略決定
        id: strategy
        run: |
          # ブランチに基づいた戦略決定
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "strategy=full" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "strategy=comprehensive" >> $GITHUB_OUTPUT
          elif [[ "${{ github.head_ref }}" == feature/* ]]; then
            echo "strategy=targeted" >> $GITHUB_OUTPUT
          elif [[ "${{ github.head_ref }}" == hotfix/* ]]; then
            echo "strategy=critical" >> $GITHUB_OUTPUT
          else
            echo "strategy=standard" >> $GITHUB_OUTPUT
          fi

  # クリティカルテスト（最優先）
  critical-tests:
    needs: detect-changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always() # 常に実行
    
    steps:
      - name: 📂 チェックアウト
        uses: actions/checkout@v4
        
      - name: 🐦 Flutter セットアップ
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION || '3.24.3' }}
          channel: 'stable'
          cache: true
          
      - name: 📦 依存関係の取得
        run: flutter pub get
        
      - name: 🧹 テスト環境準備
        run: |
          echo "🧹 テスト環境を準備中..."
          flutter clean
          flutter pub get
          echo "✅ 環境準備完了"
        
      - name: 🔧 .env ファイル作成 (堅牢版)
        run: |
          echo "📝 .envファイルを作成中..."
          echo "🔍 ワークスペース内容を確認:"
          ls -la | head -20
          echo ""
          echo "🔍 .env関連ファイルを確認:"
          ls -la .env* 2>/dev/null || echo "⚠️ .env関連ファイルが見つかりません"
          echo ""
          
          # .env.exampleが存在する場合はそれを使用
          if [ -f ".env.example" ]; then
            echo "✅ .env.exampleが見つかりました。コピーします..."
            cp .env.example .env
            echo "📋 作成された.envファイルの内容（先頭5行）:"
            head -5 .env
          else
            echo "⚠️ .env.exampleが見つかりません。テスト用.envファイルを作成します..."
            echo "# Test Environment Variables for GitHub Actions" > .env
            echo "# This file is automatically generated for CI/CD testing" >> .env
            echo "" >> .env
            echo "# Supabase Configuration (Test)" >> .env
            echo "SUPABASE_URL=https://test-project.supabase.co" >> .env
            echo "SUPABASE_ANON_KEY=test_anon_key_for_ci_testing" >> .env
            echo "" >> .env
            echo "# Sentry Configuration (Test)" >> .env
            echo "SENTRY_DSN=https://test@sentry.io/test-project" >> .env
            echo "" >> .env
            echo "# Google OAuth Configuration (Test)" >> .env
            echo "GOOGLE_IOS_CLIENT_ID=test-ios-client-id.apps.googleusercontent.com" >> .env
            echo "GOOGLE_WEB_CLIENT_ID=test-web-client-id.apps.googleusercontent.com" >> .env
            echo "" >> .env
            echo "# Development User (Test)" >> .env
            echo "DEV_USER_EMAIL=test@example.com" >> .env
            echo "DEV_USER_PASSWORD=test_password_123" >> .env
            echo "" >> .env
            echo "# Additional Settings (Test)" >> .env
            echo "DEBUG_MODE=true" >> .env
            echo "LOG_LEVEL=debug" >> .env
            echo "API_TIMEOUT=30000" >> .env
            echo "ENVIRONMENT=test" >> .env
            echo "✅ テスト用.envファイルを作成しました"
            echo "📋 作成された.envファイルの内容（先頭10行）:"
            head -10 .env
          fi
          
          echo ""
          echo "📁 最終確認 - 作成された.envファイル:"
          ls -la .env
          echo "📏 ファイルサイズ: $(wc -l < .env) 行"
        
      - name: 🧪 クリティカルテスト実行
        timeout-minutes: 3
        run: |
          echo "🚨 クリティカルテストを実行中..."
          # 最重要なモデルとユーティリティのテストのみ
          flutter test test/models/ test/utils/ --reporter=compact --timeout=2m

  # 標準テスト（feature ブランチ以外）
  standard-tests:
    needs: detect-changes
    runs-on: ubuntu-latest
    timeout-minutes: 12
    if: needs.detect-changes.outputs.test-strategy == 'standard'
    
    steps:
      - name: 📂 チェックアウト
        uses: actions/checkout@v4
        
      - name: 🐦 Flutter セットアップ
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION || '3.24.3' }}
          channel: 'stable'
          cache: true
          
      - name: 📦 依存関係の取得
        run: flutter pub get
        
      - name: 🔧 .env ファイル作成 (標準)
        run: |
          echo "📝 .envファイルを作成中..."
          if [ -f ".env.example" ]; then
            echo "✅ .env.exampleから.envファイルを作成します"
            cp .env.example .env
          else
            echo "⚠️ .env.exampleが見つかりません。標準テスト用.envファイルを作成します"
            echo "# Standard Test Environment Variables" > .env
            echo "SUPABASE_URL=https://test-project.supabase.co" >> .env
            echo "SUPABASE_ANON_KEY=test_anon_key_for_standard_tests" >> .env
            echo "DEBUG_MODE=true" >> .env
            echo "ENVIRONMENT=standard_test" >> .env
          fi
          echo "✅ .envファイル作成完了"
        
      - name: 🧪 標準テスト実行
        timeout-minutes: 10
        run: |
          echo "📋 標準テストを実行中..."
          # モデル、サービス、プロバイダーのみ
          flutter test test/models/ test/services/ test/providers/ --reporter=expanded --timeout=8m

  # 包括的テスト（development ブランチ）
  comprehensive-tests:
    needs: detect-changes
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: needs.detect-changes.outputs.test-strategy == 'comprehensive'
    
    steps:
      - name: 📂 チェックアウト
        uses: actions/checkout@v4
        
      - name: 🐦 Flutter セットアップ
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION || '3.24.3' }}
          channel: 'stable'
          cache: true
          
      - name: 📦 依存関係の取得
        run: flutter pub get
        
      - name: 🔧 .env ファイル作成 (包括的)
        run: |
          echo "📝 包括的テスト用.envファイルを作成中..."
          if [ -f ".env.example" ]; then
            cp .env.example .env
            echo "✅ .env.exampleから.envファイルを作成しました"
          else
            echo "⚠️ .env.exampleが見つかりません。包括的テスト用.envファイルを作成します"
            echo "# Comprehensive Test Environment Variables" > .env
            echo "SUPABASE_URL=https://test-project.supabase.co" >> .env
            echo "SUPABASE_ANON_KEY=test_anon_key_for_comprehensive_tests" >> .env
            echo "SENTRY_DSN=https://test@sentry.io/comprehensive-test" >> .env
            echo "DEBUG_MODE=true" >> .env
            echo "LOG_LEVEL=info" >> .env
            echo "ENVIRONMENT=comprehensive_test" >> .env
          fi
        
      - name: 🔧 コード生成
        run: flutter packages pub run build_runner build --delete-conflicting-outputs
        continue-on-error: true
        
      - name: 🧪 包括的テスト実行
        timeout-minutes: 12
        run: |
          echo "🔍 包括的テストを実行中..."
          # ウィジェット以外の全テスト
          flutter test --exclude-tags=widget --reporter=expanded --coverage --timeout=10m
          
      - name: 📊 カバレッジレポート生成
        id: coverage-report
        run: |
          if [ -f "coverage/lcov.info" ]; then
            echo "📊 カバレッジレポート生成中..."
            sed -i '/\.g\.dart/d' coverage/lcov.info
            sed -i '/\.freezed\.dart/d' coverage/lcov.info
            echo "✅ カバレッジレポート生成完了"
            
            # カバレッジ統計を計算
            total_lines=$(grep -c "^DA:" coverage/lcov.info || echo "0")
            covered_lines=$(grep "^DA:" coverage/lcov.info | grep -v ",0$" | wc -l || echo "0")
            if [ "$total_lines" -gt 0 ]; then
              coverage_percent=$(echo "scale=2; $covered_lines * 100 / $total_lines" | bc -l)
              echo "📈 カバレッジ: $covered_lines/$total_lines ($coverage_percent%)"
              echo "coverage-percent=$coverage_percent" >> $GITHUB_OUTPUT
              echo "total-lines=$total_lines" >> $GITHUB_OUTPUT
              echo "covered-lines=$covered_lines" >> $GITHUB_OUTPUT
            else
              echo "coverage-percent=0" >> $GITHUB_OUTPUT
              echo "total-lines=0" >> $GITHUB_OUTPUT
              echo "covered-lines=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ カバレッジファイルが見つかりませんでした"
            echo "coverage-percent=0" >> $GITHUB_OUTPUT
            echo "total-lines=0" >> $GITHUB_OUTPUT
            echo "covered-lines=0" >> $GITHUB_OUTPUT
          fi

  # フルテスト（main ブランチ）
  full-tests:
    needs: detect-changes
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: needs.detect-changes.outputs.test-strategy == 'full'
    
    steps:
      - name: 📂 チェックアウト
        uses: actions/checkout@v4
        
      - name: 🐦 Flutter セットアップ
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION || '3.24.3' }}
          channel: 'stable'
          cache: true
          
      - name: 📦 依存関係の取得
        run: flutter pub get
        
      - name: 🔧 .env ファイル作成 (フル)
        run: |
          echo "📝 フルテスト用.envファイルを作成中..."
          if [ -f ".env.example" ]; then
            cp .env.example .env
            echo "✅ .env.exampleから.envファイルを作成しました"
          else
            echo "⚠️ .env.exampleが見つかりません。フルテスト用.envファイルを作成します"
            echo "# Full Test Environment Variables" > .env
            echo "SUPABASE_URL=https://test-project.supabase.co" >> .env
            echo "SUPABASE_ANON_KEY=test_anon_key_for_full_tests" >> .env
            echo "SENTRY_DSN=https://test@sentry.io/full-test" >> .env
            echo "GOOGLE_IOS_CLIENT_ID=test-ios-full.apps.googleusercontent.com" >> .env
            echo "GOOGLE_WEB_CLIENT_ID=test-web-full.apps.googleusercontent.com" >> .env
            echo "DEV_USER_EMAIL=test@example.com" >> .env
            echo "DEV_USER_PASSWORD=test_password_full" >> .env
            echo "DEBUG_MODE=true" >> .env
            echo "LOG_LEVEL=debug" >> .env
            echo "API_TIMEOUT=30000" >> .env
            echo "ENVIRONMENT=full_test" >> .env
          fi
        
      - name: 🔧 コード生成
        run: flutter packages pub run build_runner build --delete-conflicting-outputs
        continue-on-error: true
        
      - name: 🧪 フルテスト実行
        timeout-minutes: 18
        run: |
          echo "🎯 フルテストスイートを実行中..."
          flutter test --reporter=expanded --coverage --timeout=15m
          
      - name: 📊 カバレッジレポート生成
        id: coverage-report-full
        run: |
          if [ -f "coverage/lcov.info" ]; then
            echo "📊 カバレッジレポート生成中..."
            sed -i '/\.g\.dart/d' coverage/lcov.info
            sed -i '/\.freezed\.dart/d' coverage/lcov.info
            echo "✅ カバレッジレポート生成完了"
            
            # カバレッジ統計を計算
            total_lines=$(grep -c "^DA:" coverage/lcov.info || echo "0")
            covered_lines=$(grep "^DA:" coverage/lcov.info | grep -v ",0$" | wc -l || echo "0")
            if [ "$total_lines" -gt 0 ]; then
              coverage_percent=$(echo "scale=2; $covered_lines * 100 / $total_lines" | bc -l)
              echo "📈 カバレッジ: $covered_lines/$total_lines ($coverage_percent%)"
              echo "coverage-percent=$coverage_percent" >> $GITHUB_OUTPUT
              echo "total-lines=$total_lines" >> $GITHUB_OUTPUT  
              echo "covered-lines=$covered_lines" >> $GITHUB_OUTPUT
            else
              echo "coverage-percent=0" >> $GITHUB_OUTPUT
              echo "total-lines=0" >> $GITHUB_OUTPUT
              echo "covered-lines=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ カバレッジファイルが見つかりませんでした"
            echo "coverage-percent=0" >> $GITHUB_OUTPUT
            echo "total-lines=0" >> $GITHUB_OUTPUT
            echo "covered-lines=0" >> $GITHUB_OUTPUT
          fi

      - name: 📈 カバレッジをCodecovにアップロード
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: english-diary-app-coverage
          fail_ci_if_error: false

  # テスト結果サマリー
  test-summary:
    needs: [detect-changes, critical-tests, standard-tests, comprehensive-tests, full-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 テスト結果サマリー
        uses: actions/github-script@v7
        if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
        with:
          script: |
            const strategy = '${{ needs.detect-changes.outputs.test-strategy }}';
            const criticalResult = '${{ needs.critical-tests.result }}';
            const standardResult = '${{ needs.standard-tests.result }}';
            const comprehensiveResult = '${{ needs.comprehensive-tests.result }}';
            const fullResult = '${{ needs.full-tests.result }}';
            
            let message = `## 🧪 テスト実行結果 (改善版)\n\n`;
            message += `**実行戦略**: ${strategy}\n`;
            message += `**ブランチ**: ${context.ref}\n`;
            message += `**トリガー**: ${context.eventName}\n\n`;
            
            message += `### 📋 実行されたテスト\n`;
            const criticalStatus = criticalResult === 'success' ? '✅' : 
              criticalResult === 'skipped' ? '⏭️' : '❌';
            message += `- 🚨 クリティカルテスト: ${criticalStatus}\n`;
            
            if (strategy === 'standard') {
              const standardStatus = standardResult === 'success' ? '✅' : 
                standardResult === 'skipped' ? '⏭️' : '❌';
              message += `- 📋 標準テスト: ${standardStatus}\n`;
            } else if (strategy === 'comprehensive') {
              const comprehensiveStatus = comprehensiveResult === 'success' ? '✅' : 
                comprehensiveResult === 'skipped' ? '⏭️' : '❌';
              message += `- 🔍 包括的テスト: ${comprehensiveStatus}\n`;
            } else if (strategy === 'full') {
              const fullStatus = fullResult === 'success' ? '✅' : 
                fullResult === 'skipped' ? '⏭️' : '❌';
              message += `- 🎯 フルテスト: ${fullStatus}\n`;
            }
            
            // 最終結果
            const allPassed = criticalResult === 'success' && 
              (standardResult === 'success' || standardResult === 'skipped') &&
              (comprehensiveResult === 'success' || comprehensiveResult === 'skipped') &&
              (fullResult === 'success' || fullResult === 'skipped');
              
            message += `\n### 🎉 総合結果\n`;
            if (allPassed) {
              message += '✅ **すべてのテストが成功しました！**\n\n';
              message += '🚀 マージの準備ができています。';
            } else {
              message += '❌ **一部のテストが失敗しました**\n\n';
              message += '🔧 失敗したテストを修正してから再度プッシュしてください。';
            }
            
            if (context.payload.pull_request) {
              try {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: message
                });
                console.log('✅ コメントを投稿しました');
              } catch (error) {
                console.log('⚠️ コメント投稿をスキップしました (権限不足またはフォークPR)');
                console.log(`Error: ${error.message}`);
              }
            }
            
            console.log(message);
