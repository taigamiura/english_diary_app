name: 🧪 Flutter Tests

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
      - 'feature/*'
      - 'bug/*'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📂 チェックアウト
        uses: actions/checkout@v4
        
      - name: 🐦 Flutter セットアップ
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION || '3.24.3' }}
          channel: 'stable'
          cache: true
          
      - name: 📦 依存関係の取得
        run: flutter pub get
        
      - name: 🔧 コード生成
        run: flutter packages pub run build_runner build --delete-conflicting-outputs
        continue-on-error: true
        
      - name: 🧪 単体テスト実行
        run: |
          echo "📋 テスト実行を開始します..."
          flutter test --reporter=expanded --coverage
          
      - name: 📊 カバレッジレポート生成
        run: |
          # カバレッジファイルが存在する場合のみ処理
          if [ -f "coverage/lcov.info" ]; then
            echo "📊 カバレッジレポートを生成中..."
            # Remove generated files from coverage
            sed -i '/\.g\.dart/d' coverage/lcov.info
            sed -i '/\.freezed\.dart/d' coverage/lcov.info
            echo "✅ カバレッジレポート生成完了"
          else
            echo "⚠️ カバレッジファイルが見つかりませんでした"
          fi
          
      - name: 📈 カバレッジをCodecovにアップロード
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: english-diary-app-coverage
          fail_ci_if_error: false
          
      - name: 💬 テスト結果をコメント（PR時）
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let coverageInfo = '';
            
            try {
              if (fs.existsSync('coverage/lcov.info')) {
                coverageInfo = '✅ カバレッジレポートが生成されました';
              } else {
                coverageInfo = '⚠️ カバレッジレポートの生成に失敗しました';
              }
            } catch (error) {
              coverageInfo = '❌ カバレッジ情報の読み込みに失敗しました';
            }
            
            const message = `## 🧪 テスト実行結果
            
            ✅ すべてのテストが正常に完了しました！
            
            ### 📊 カバレッジ情報
            ${coverageInfo}
            
            ### 🔍 実行されたテストカテゴリ
            - ✅ モデルテスト
            - ✅ ユーティリティテスト  
            - ✅ プロバイダーテスト
            - ✅ ウィジェットテスト
            
            🎉 コードの品質が維持されています！`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
            
      - name: ❌ テスト失敗時の詳細報告
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ❌ テスト実行に失敗しました
            
            テストの実行中にエラーが発生しました。
            
            ### 🔧 対処方法
            1. ローカル環境で \`flutter test\` を実行してエラーを確認
            2. テストコードの修正
            3. 必要に応じて依存関係の更新
            
            ### 📋 チェックリスト
            - [ ] すべてのテストがローカルで通過することを確認
            - [ ] 新しいコードに対応するテストを追加
            - [ ] モックが正しく設定されているか確認
            
            詳細はActions のログを確認してください。`;
            
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }
