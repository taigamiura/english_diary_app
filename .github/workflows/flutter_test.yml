name: 🧪 Flutter Tests

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
      - 'feature/*'
      - 'bug/*'

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📂 チェックアウト
        uses: actions/checkout@v4
        
      - name: 🐦 Flutter セットアップ
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ vars.FLUTTER_VERSION || '3.24.3' }}
          channel: 'stable'
          cache: true
          
      - name: 📦 依存関係の取得
        run: flutter pub get
        
      - name: 🔧 .env ファイル作成
        run: |
          echo "📝 .envファイルを作成中..."
          
          # .env.exampleが存在する場合はそれを使用
          if [ -f ".env.example" ]; then
            echo "✅ .env.exampleが見つかりました。コピーします..."
            cp .env.example .env
            echo "📋 .envファイルを作成しました"
          else
            echo "⚠️ .env.exampleが見つかりません。テスト用.envファイルを作成します..."
            echo "# Test Environment Variables for GitHub Actions" > .env
            echo "# This file is automatically generated for CI/CD testing" >> .env
            echo "" >> .env
            echo "# Supabase Configuration (Test)" >> .env
            echo "SUPABASE_URL=https://test-project.supabase.co" >> .env
            echo "SUPABASE_ANON_KEY=test_anon_key_for_ci_testing" >> .env
            echo "" >> .env
            echo "# Sentry Configuration (Test)" >> .env
            echo "SENTRY_DSN=https://test@sentry.io/test-project" >> .env
            echo "" >> .env
            echo "# Google OAuth Configuration (Test)" >> .env
            echo "GOOGLE_IOS_CLIENT_ID=test-ios.apps.googleusercontent.com" >> .env
            echo "GOOGLE_WEB_CLIENT_ID=test-web.apps.googleusercontent.com" >> .env
            echo "" >> .env
            echo "# Development User (Test)" >> .env
            echo "DEV_USER_EMAIL=test@example.com" >> .env
            echo "DEV_USER_PASSWORD=test_password_123" >> .env
            echo "" >> .env
            echo "# Additional Settings (Test)" >> .env
            echo "DEBUG_MODE=true" >> .env
            echo "LOG_LEVEL=debug" >> .env
            echo "API_TIMEOUT=30000" >> .env
            echo "ENVIRONMENT=test" >> .env
            echo "✅ テスト用.envファイルを作成しました"
            echo "📋 作成された.envファイルの内容（先頭10行）:"
            head -10 .env
          fi
          
          echo "📁 確認 - 作成された.envファイル:"
          ls -la .env 2>/dev/null || echo "❌ .envファイルの作成に失敗"
        
      - name: 🔧 コード生成
        run: flutter packages pub run build_runner build --delete-conflicting-outputs
        continue-on-error: true
        
      - name: 🧪 単体テスト実行
        env:
          CI: true
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          echo "📋 テスト実行を開始します..."
          flutter test --reporter=expanded --coverage
          
      - name: 📊 カバレッジレポート生成
        run: |
          # カバレッジファイルが存在する場合のみ処理
          if [ -f "coverage/lcov.info" ]; then
            echo "📊 カバレッジレポートを生成中..."
            # Remove generated files from coverage
            sed -i '/\.g\.dart/d' coverage/lcov.info
            sed -i '/\.freezed\.dart/d' coverage/lcov.info
            echo "✅ カバレッジレポート生成完了"
          else
            echo "⚠️ カバレッジファイルが見つかりませんでした"
          fi
          
      - name: 📈 カバレッジをCodecovにアップロード
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: english-diary-app-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          
      - name: 💬 テスト結果をコメント（PR時）
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let coverageInfo = '';
            
            try {
              if (fs.existsSync('coverage/lcov.info')) {
                coverageInfo = '✅ カバレッジレポートが生成されました';
              } else {
                coverageInfo = '⚠️ カバレッジレポートの生成に失敗しました';
              }
            } catch (error) {
              coverageInfo = '❌ カバレッジ情報の読み込みに失敗しました';
            }
            
            const message = `## 🧪 テスト実行結果
            
            ✅ すべてのテストが正常に完了しました！
            
            ### 📊 カバレッジ情報
            ${coverageInfo}
            
            ### 🔍 実行されたテストカテゴリ
            - ✅ モデルテスト
            - ✅ ユーティリティテスト  
            - ✅ プロバイダーテスト
            - ✅ ウィジェットテスト
            
            🎉 コードの品質が維持されています！`;
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
              console.log('✅ コメントを投稿しました');
            } catch (error) {
              console.log('⚠️ コメント投稿をスキップしました (権限不足またはフォークPR)');
              console.log(`Error: ${error.message}`);
            }
            
      - name: ❌ テスト失敗時の詳細報告
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ❌ テスト実行に失敗しました
            
            テストの実行中にエラーが発生しました。
            
            ### 🔧 対処方法
            1. ローカル環境で \`flutter test\` を実行してエラーを確認
            2. テストコードの修正
            3. 必要に応じて依存関係の更新
            
            ### 📋 チェックリスト
            - [ ] すべてのテストがローカルで通過することを確認
            - [ ] 新しいコードに対応するテストを追加
            - [ ] モックが正しく設定されているか確認
            
            詳細はActions のログを確認してください。`;
            
            if (context.payload.pull_request) {
              try {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: message
                });
                console.log('✅ エラーレポートを投稿しました');
              } catch (error) {
                console.log('⚠️ エラーレポート投稿をスキップしました (権限不足またはフォークPR)');
                console.log(`Error: ${error.message}`);
              }
            }
