// Mocks generated by Mockito 5.4.6 from annotations
// in kiwi/test/services/ai_correction_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:kiwi/models/ai_correction_model.dart' as _i5;
import 'package:kiwi/repositories/ai_correction_repository.dart' as _i3;
import 'package:kiwi/repositories/api_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiRepository_0 extends _i1.SmartFake implements _i2.ApiRepository {
  _FakeApiRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AiCorrectionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAiCorrectionRepository extends _i1.Mock
    implements _i3.AiCorrectionRepository {
  MockAiCorrectionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiRepository get apiRepository =>
      (super.noSuchMethod(
            Invocation.getter(#apiRepository),
            returnValue: _FakeApiRepository_0(
              this,
              Invocation.getter(#apiRepository),
            ),
          )
          as _i2.ApiRepository);

  @override
  _i4.Future<List<_i5.AiCorrection>> fetchAiCorrections({
    required String? diaryEntryId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAiCorrections, [], {
              #diaryEntryId: diaryEntryId,
            }),
            returnValue: _i4.Future<List<_i5.AiCorrection>>.value(
              <_i5.AiCorrection>[],
            ),
          )
          as _i4.Future<List<_i5.AiCorrection>>);

  @override
  _i4.Future<_i5.AiCorrection?> fetchAiCorrection(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAiCorrection, [id]),
            returnValue: _i4.Future<_i5.AiCorrection?>.value(),
          )
          as _i4.Future<_i5.AiCorrection?>);

  @override
  _i4.Future<void> insertAiCorrection(_i5.AiCorrection? correction) =>
      (super.noSuchMethod(
            Invocation.method(#insertAiCorrection, [correction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateAiCorrection(
    String? id,
    _i5.AiCorrection? correction,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAiCorrection, [id, correction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAiCorrection(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAiCorrection, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
