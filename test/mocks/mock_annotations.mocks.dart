// Mocks generated by Mockito 5.4.6 from annotations
// in english_diary_app/test/mocks/mock_annotations.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:english_diary_app/models/ai_correction_model.dart' as _i10;
import 'package:english_diary_app/models/diary_feedback_model.dart' as _i12;
import 'package:english_diary_app/models/diary_model.dart' as _i6;
import 'package:english_diary_app/models/payment_model.dart' as _i14;
import 'package:english_diary_app/models/plan_model.dart' as _i16;
import 'package:english_diary_app/models/profile_model.dart' as _i8;
import 'package:english_diary_app/models/subscription_model.dart' as _i18;
import 'package:english_diary_app/models/year_month.dart' as _i21;
import 'package:english_diary_app/repositories/ai_correction_repository.dart'
    as _i9;
import 'package:english_diary_app/repositories/api_repository.dart' as _i2;
import 'package:english_diary_app/repositories/auth_repository.dart' as _i19;
import 'package:english_diary_app/repositories/diary_feedback_repository.dart'
    as _i11;
import 'package:english_diary_app/repositories/diary_repository.dart' as _i5;
import 'package:english_diary_app/repositories/payment_repository.dart' as _i13;
import 'package:english_diary_app/repositories/plan_repository.dart' as _i15;
import 'package:english_diary_app/repositories/profile_repository.dart' as _i7;
import 'package:english_diary_app/repositories/subscription_repository.dart'
    as _i17;
import 'package:english_diary_app/services/ai_correction_service.dart' as _i23;
import 'package:english_diary_app/services/diary_feedback_service.dart' as _i24;
import 'package:english_diary_app/services/diary_service.dart' as _i20;
import 'package:english_diary_app/services/payment_service.dart' as _i25;
import 'package:english_diary_app/services/plan_service.dart' as _i26;
import 'package:english_diary_app/services/subscription_service.dart' as _i27;
import 'package:english_diary_app/services/user_service.dart' as _i22;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i28;
import 'package:supabase_flutter/supabase_flutter.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiRepository_0 extends _i1.SmartFake implements _i2.ApiRepository {
  _FakeApiRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseClient_1 extends _i1.SmartFake
    implements _i3.SupabaseClient {
  _FakeSupabaseClient_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthResponse_2 extends _i1.SmartFake implements _i3.AuthResponse {
  _FakeAuthResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFunctionsClient_3 extends _i1.SmartFake
    implements _i3.FunctionsClient {
  _FakeFunctionsClient_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseStorageClient_4 extends _i1.SmartFake
    implements _i3.SupabaseStorageClient {
  _FakeSupabaseStorageClient_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeClient_5 extends _i1.SmartFake
    implements _i3.RealtimeClient {
  _FakeRealtimeClient_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestClient_6 extends _i1.SmartFake
    implements _i3.PostgrestClient {
  _FakePostgrestClient_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoTrueClient_7 extends _i1.SmartFake implements _i3.GoTrueClient {
  _FakeGoTrueClient_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseQueryBuilder_8 extends _i1.SmartFake
    implements _i3.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseQuerySchema_9 extends _i1.SmartFake
    implements _i3.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestFilterBuilder_10<T1> extends _i1.SmartFake
    implements _i3.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeChannel_11 extends _i1.SmartFake
    implements _i3.RealtimeChannel {
  _FakeRealtimeChannel_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseStreamFilterBuilder_12 extends _i1.SmartFake
    implements _i3.SupabaseStreamFilterBuilder {
  _FakeSupabaseStreamFilterBuilder_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakePostgrestQueryBuilder_13<T> extends _i1.SmartFake
    implements _i3.PostgrestQueryBuilder<T> {
  _FakePostgrestQueryBuilder_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestBuilder_14<T, S, R> extends _i1.SmartFake
    implements _i3.PostgrestBuilder<T, S, R> {
  _FakePostgrestBuilder_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_15 extends _i1.SmartFake implements Uri {
  _FakeUri_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_16<T> extends _i1.SmartFake implements _i4.Future<T> {
  _FakeFuture_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestTransformBuilder_17<T1> extends _i1.SmartFake
    implements _i3.PostgrestTransformBuilder<T1> {
  _FakePostgrestTransformBuilder_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponsePostgrestBuilder_18<T1, S, R> extends _i1.SmartFake
    implements _i3.ResponsePostgrestBuilder<T1, S, R> {
  _FakeResponsePostgrestBuilder_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoTrueAdminApi_19 extends _i1.SmartFake
    implements _i3.GoTrueAdminApi {
  _FakeGoTrueAdminApi_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoTrueMFAApi_20 extends _i1.SmartFake implements _i3.GoTrueMFAApi {
  _FakeGoTrueMFAApi_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOAuthResponse_21 extends _i1.SmartFake implements _i3.OAuthResponse {
  _FakeOAuthResponse_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthSessionUrlResponse_22 extends _i1.SmartFake
    implements _i3.AuthSessionUrlResponse {
  _FakeAuthSessionUrlResponse_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResendResponse_23 extends _i1.SmartFake
    implements _i3.ResendResponse {
  _FakeResendResponse_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserResponse_24 extends _i1.SmartFake implements _i3.UserResponse {
  _FakeUserResponse_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeObject_25 extends _i1.SmartFake implements Object {
  _FakeObject_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DiaryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiaryRepository extends _i1.Mock implements _i5.DiaryRepository {
  MockDiaryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiRepository get apiRepository =>
      (super.noSuchMethod(
            Invocation.getter(#apiRepository),
            returnValue: _FakeApiRepository_0(
              this,
              Invocation.getter(#apiRepository),
            ),
          )
          as _i2.ApiRepository);

  @override
  _i4.Future<List<_i6.Diary>> fetchDiaries({
    required String? userId,
    required DateTime? from,
    required DateTime? to,
    required int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDiaries, [], {
              #userId: userId,
              #from: from,
              #to: to,
              #limit: limit,
            }),
            returnValue: _i4.Future<List<_i6.Diary>>.value(<_i6.Diary>[]),
          )
          as _i4.Future<List<_i6.Diary>>);

  @override
  _i4.Future<List<_i6.Diary>> fetchDateDiary({
    required String? userId,
    required DateTime? date,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDateDiary, [], {
              #userId: userId,
              #date: date,
            }),
            returnValue: _i4.Future<List<_i6.Diary>>.value(<_i6.Diary>[]),
          )
          as _i4.Future<List<_i6.Diary>>);

  @override
  _i4.Future<List<String>> fetchPostedMonths(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPostedMonths, [userId]),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<_i6.Diary?> fetchDiary(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDiary, [id]),
            returnValue: _i4.Future<_i6.Diary?>.value(),
          )
          as _i4.Future<_i6.Diary?>);

  @override
  _i4.Future<int> fetchAverageTextInput({required String? userId}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAverageTextInput, [], {#userId: userId}),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<void> insertDiary(_i6.Diary? diary) =>
      (super.noSuchMethod(
            Invocation.method(#insertDiary, [diary]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertDiaries(List<_i6.Diary>? diaries) =>
      (super.noSuchMethod(
            Invocation.method(#insertDiaries, [diaries]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDiary(_i6.Diary? diary) =>
      (super.noSuchMethod(
            Invocation.method(#updateDiary, [diary]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDiaries(
    List<_i6.Diary>? diaries, {
    String? idColumn = 'id',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateDiaries, [diaries], {#idColumn: idColumn}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDiary(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDiary, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDiaries(
    List<String>? ids, {
    String? idColumn = 'id',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDiaries, [ids], {#idColumn: idColumn}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiRepository extends _i1.Mock implements _i2.ApiRepository {
  MockApiRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_1(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i3.SupabaseClient);

  @override
  _i4.Future<List<Map<String, dynamic>>> fetchList({
    required String? table,
    Map<String, dynamic>? filters,
    int? limit,
    String? orderBy,
    bool? ascending = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchList, [], {
              #table: table,
              #filters: filters,
              #limit: limit,
              #orderBy: orderBy,
              #ascending: ascending,
            }),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<Map<String, dynamic>?> fetchOne({
    required String? table,
    required String? id,
    String? idColumn = 'id',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchOne, [], {
              #table: table,
              #id: id,
              #idColumn: idColumn,
            }),
            returnValue: _i4.Future<Map<String, dynamic>?>.value(),
          )
          as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<void> insertMany({
    required String? table,
    required List<Map<String, dynamic>>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#insertMany, [], {#table: table, #data: data}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertOne({
    required String? table,
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#insertOne, [], {#table: table, #data: data}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateMany({
    required String? table,
    required List<Map<String, dynamic>>? data,
    required String? idColumn,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateMany, [], {
              #table: table,
              #data: data,
              #idColumn: idColumn,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateOne({
    required String? table,
    required String? id,
    required Map<String, dynamic>? data,
    String? idColumn = 'id',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateOne, [], {
              #table: table,
              #id: id,
              #data: data,
              #idColumn: idColumn,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMany({
    required String? table,
    required List<String>? ids,
    String? idColumn = 'id',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMany, [], {
              #table: table,
              #ids: ids,
              #idColumn: idColumn,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteOne({
    required String? table,
    required String? id,
    String? idColumn = 'id',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteOne, [], {
              #table: table,
              #id: id,
              #idColumn: idColumn,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> login() =>
      (super.noSuchMethod(
            Invocation.method(#login, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i7.ProfileRepository {
  MockProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiRepository get apiRepository =>
      (super.noSuchMethod(
            Invocation.getter(#apiRepository),
            returnValue: _FakeApiRepository_0(
              this,
              Invocation.getter(#apiRepository),
            ),
          )
          as _i2.ApiRepository);

  @override
  _i4.Future<List<_i8.Profile>> fetchProfiles() =>
      (super.noSuchMethod(
            Invocation.method(#fetchProfiles, []),
            returnValue: _i4.Future<List<_i8.Profile>>.value(<_i8.Profile>[]),
          )
          as _i4.Future<List<_i8.Profile>>);

  @override
  _i4.Future<_i8.Profile?> fetchProfile(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchProfile, [id]),
            returnValue: _i4.Future<_i8.Profile?>.value(),
          )
          as _i4.Future<_i8.Profile?>);

  @override
  _i4.Future<void> insertProfile(_i8.Profile? profile) =>
      (super.noSuchMethod(
            Invocation.method(#insertProfile, [profile]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateProfile(String? id, _i8.Profile? profile) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [id, profile]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteProfile(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProfile, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [AiCorrectionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAiCorrectionRepository extends _i1.Mock
    implements _i9.AiCorrectionRepository {
  MockAiCorrectionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiRepository get apiRepository =>
      (super.noSuchMethod(
            Invocation.getter(#apiRepository),
            returnValue: _FakeApiRepository_0(
              this,
              Invocation.getter(#apiRepository),
            ),
          )
          as _i2.ApiRepository);

  @override
  _i4.Future<List<_i10.AiCorrection>> fetchAiCorrections({
    required String? diaryEntryId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAiCorrections, [], {
              #diaryEntryId: diaryEntryId,
            }),
            returnValue: _i4.Future<List<_i10.AiCorrection>>.value(
              <_i10.AiCorrection>[],
            ),
          )
          as _i4.Future<List<_i10.AiCorrection>>);

  @override
  _i4.Future<_i10.AiCorrection?> fetchAiCorrection(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAiCorrection, [id]),
            returnValue: _i4.Future<_i10.AiCorrection?>.value(),
          )
          as _i4.Future<_i10.AiCorrection?>);

  @override
  _i4.Future<void> insertAiCorrection(_i10.AiCorrection? correction) =>
      (super.noSuchMethod(
            Invocation.method(#insertAiCorrection, [correction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateAiCorrection(
    String? id,
    _i10.AiCorrection? correction,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAiCorrection, [id, correction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAiCorrection(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAiCorrection, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DiaryFeedbackRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiaryFeedbackRepository extends _i1.Mock
    implements _i11.DiaryFeedbackRepository {
  MockDiaryFeedbackRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiRepository get apiRepository =>
      (super.noSuchMethod(
            Invocation.getter(#apiRepository),
            returnValue: _FakeApiRepository_0(
              this,
              Invocation.getter(#apiRepository),
            ),
          )
          as _i2.ApiRepository);

  @override
  _i4.Future<List<_i12.DiaryFeedback>> fetchDiaryFeedbacks({
    required String? diaryEntryId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDiaryFeedbacks, [], {
              #diaryEntryId: diaryEntryId,
            }),
            returnValue: _i4.Future<List<_i12.DiaryFeedback>>.value(
              <_i12.DiaryFeedback>[],
            ),
          )
          as _i4.Future<List<_i12.DiaryFeedback>>);

  @override
  _i4.Future<_i12.DiaryFeedback?> fetchDiaryFeedback(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDiaryFeedback, [id]),
            returnValue: _i4.Future<_i12.DiaryFeedback?>.value(),
          )
          as _i4.Future<_i12.DiaryFeedback?>);

  @override
  _i4.Future<void> insertDiaryFeedback(_i12.DiaryFeedback? feedback) =>
      (super.noSuchMethod(
            Invocation.method(#insertDiaryFeedback, [feedback]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDiaryFeedback(
    String? id,
    _i12.DiaryFeedback? feedback,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDiaryFeedback, [id, feedback]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDiaryFeedback(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDiaryFeedback, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [PaymentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentRepository extends _i1.Mock implements _i13.PaymentRepository {
  MockPaymentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiRepository get apiRepository =>
      (super.noSuchMethod(
            Invocation.getter(#apiRepository),
            returnValue: _FakeApiRepository_0(
              this,
              Invocation.getter(#apiRepository),
            ),
          )
          as _i2.ApiRepository);

  @override
  _i4.Future<List<_i14.Payment>> fetchPayments({required String? profileId}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPayments, [], {#profileId: profileId}),
            returnValue: _i4.Future<List<_i14.Payment>>.value(<_i14.Payment>[]),
          )
          as _i4.Future<List<_i14.Payment>>);

  @override
  _i4.Future<_i14.Payment?> fetchPayment(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPayment, [id]),
            returnValue: _i4.Future<_i14.Payment?>.value(),
          )
          as _i4.Future<_i14.Payment?>);

  @override
  _i4.Future<void> insertPayment(_i14.Payment? payment) =>
      (super.noSuchMethod(
            Invocation.method(#insertPayment, [payment]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updatePayment(int? id, _i14.Payment? payment) =>
      (super.noSuchMethod(
            Invocation.method(#updatePayment, [id, payment]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deletePayment(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePayment, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [PlanRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlanRepository extends _i1.Mock implements _i15.PlanRepository {
  MockPlanRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiRepository get apiRepository =>
      (super.noSuchMethod(
            Invocation.getter(#apiRepository),
            returnValue: _FakeApiRepository_0(
              this,
              Invocation.getter(#apiRepository),
            ),
          )
          as _i2.ApiRepository);

  @override
  _i4.Future<List<_i16.Plan>> fetchPlans() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPlans, []),
            returnValue: _i4.Future<List<_i16.Plan>>.value(<_i16.Plan>[]),
          )
          as _i4.Future<List<_i16.Plan>>);

  @override
  _i4.Future<_i16.Plan?> fetchPlan(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPlan, [id]),
            returnValue: _i4.Future<_i16.Plan?>.value(),
          )
          as _i4.Future<_i16.Plan?>);

  @override
  _i4.Future<void> insertPlan(_i16.Plan? plan) =>
      (super.noSuchMethod(
            Invocation.method(#insertPlan, [plan]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updatePlan(int? id, _i16.Plan? plan) =>
      (super.noSuchMethod(
            Invocation.method(#updatePlan, [id, plan]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deletePlan(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePlan, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SubscriptionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionRepository extends _i1.Mock
    implements _i17.SubscriptionRepository {
  MockSubscriptionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiRepository get apiRepository =>
      (super.noSuchMethod(
            Invocation.getter(#apiRepository),
            returnValue: _FakeApiRepository_0(
              this,
              Invocation.getter(#apiRepository),
            ),
          )
          as _i2.ApiRepository);

  @override
  _i4.Future<List<_i18.Subscription>> fetchSubscriptions({
    required String? profileId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSubscriptions, [], {#profileId: profileId}),
            returnValue: _i4.Future<List<_i18.Subscription>>.value(
              <_i18.Subscription>[],
            ),
          )
          as _i4.Future<List<_i18.Subscription>>);

  @override
  _i4.Future<_i18.Subscription?> fetchSubscription(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSubscription, [id]),
            returnValue: _i4.Future<_i18.Subscription?>.value(),
          )
          as _i4.Future<_i18.Subscription?>);

  @override
  _i4.Future<void> insertSubscription(_i18.Subscription? subscription) =>
      (super.noSuchMethod(
            Invocation.method(#insertSubscription, [subscription]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateSubscription(
    int? id,
    _i18.Subscription? subscription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateSubscription, [id, subscription]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSubscription(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSubscription, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i19.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_1(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i3.SupabaseClient);

  @override
  _i4.Future<_i3.AuthResponse> signUpWithEmail() =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmail, []),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#signUpWithEmail, []),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<_i3.AuthResponse> signInWithEmail() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmail, []),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#signInWithEmail, []),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<_i3.AuthResponse> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#signInWithGoogle, []),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DiaryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiaryService extends _i1.Mock implements _i20.DiaryService {
  MockDiaryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i6.Diary>> fetchDiaries({
    required String? userId,
    required DateTime? from,
    required DateTime? to,
    required int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDiaries, [], {
              #userId: userId,
              #from: from,
              #to: to,
              #limit: limit,
            }),
            returnValue: _i4.Future<List<_i6.Diary>>.value(<_i6.Diary>[]),
          )
          as _i4.Future<List<_i6.Diary>>);

  @override
  _i4.Future<List<_i6.Diary>> fetchDateDiary({
    required String? userId,
    required DateTime? date,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDateDiary, [], {
              #userId: userId,
              #date: date,
            }),
            returnValue: _i4.Future<List<_i6.Diary>>.value(<_i6.Diary>[]),
          )
          as _i4.Future<List<_i6.Diary>>);

  @override
  _i4.Future<List<_i21.YearMonth>> fetchPostedMonths({
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPostedMonths, [], {#userId: userId}),
            returnValue: _i4.Future<List<_i21.YearMonth>>.value(
              <_i21.YearMonth>[],
            ),
          )
          as _i4.Future<List<_i21.YearMonth>>);

  @override
  _i4.Future<_i6.Diary?> fetchDiary(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDiary, [id]),
            returnValue: _i4.Future<_i6.Diary?>.value(),
          )
          as _i4.Future<_i6.Diary?>);

  @override
  _i4.Future<int> fetchAverageTextInput({required String? userId}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAverageTextInput, [], {#userId: userId}),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<void> insertDiary(_i6.Diary? diary) =>
      (super.noSuchMethod(
            Invocation.method(#insertDiary, [diary]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDiary(String? id, _i6.Diary? diary) =>
      (super.noSuchMethod(
            Invocation.method(#updateDiary, [id, diary]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDiary(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDiary, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i22.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i8.Profile?> fetchUser(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchUser, [id]),
            returnValue: _i4.Future<_i8.Profile?>.value(),
          )
          as _i4.Future<_i8.Profile?>);

  @override
  _i4.Future<List<_i8.Profile>> fetchUsers() =>
      (super.noSuchMethod(
            Invocation.method(#fetchUsers, []),
            returnValue: _i4.Future<List<_i8.Profile>>.value(<_i8.Profile>[]),
          )
          as _i4.Future<List<_i8.Profile>>);

  @override
  _i4.Future<void> insertUser(_i8.Profile? profile) =>
      (super.noSuchMethod(
            Invocation.method(#insertUser, [profile]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateUser(String? id, _i8.Profile? profile) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [id, profile]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteUser(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [AiCorrectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAiCorrectionService extends _i1.Mock
    implements _i23.AiCorrectionService {
  MockAiCorrectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i10.AiCorrection>> fetchAiCorrections({
    required String? diaryEntryId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAiCorrections, [], {
              #diaryEntryId: diaryEntryId,
            }),
            returnValue: _i4.Future<List<_i10.AiCorrection>>.value(
              <_i10.AiCorrection>[],
            ),
          )
          as _i4.Future<List<_i10.AiCorrection>>);

  @override
  _i4.Future<_i10.AiCorrection?> fetchAiCorrection(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAiCorrection, [id]),
            returnValue: _i4.Future<_i10.AiCorrection?>.value(),
          )
          as _i4.Future<_i10.AiCorrection?>);

  @override
  _i4.Future<void> insertAiCorrection(_i10.AiCorrection? correction) =>
      (super.noSuchMethod(
            Invocation.method(#insertAiCorrection, [correction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateAiCorrection(
    String? id,
    _i10.AiCorrection? correction,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAiCorrection, [id, correction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAiCorrection(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAiCorrection, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DiaryFeedbackService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiaryFeedbackService extends _i1.Mock
    implements _i24.DiaryFeedbackService {
  MockDiaryFeedbackService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i12.DiaryFeedback>> fetchDiaryFeedbacks({
    required String? diaryEntryId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDiaryFeedbacks, [], {
              #diaryEntryId: diaryEntryId,
            }),
            returnValue: _i4.Future<List<_i12.DiaryFeedback>>.value(
              <_i12.DiaryFeedback>[],
            ),
          )
          as _i4.Future<List<_i12.DiaryFeedback>>);

  @override
  _i4.Future<_i12.DiaryFeedback?> fetchDiaryFeedback(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDiaryFeedback, [id]),
            returnValue: _i4.Future<_i12.DiaryFeedback?>.value(),
          )
          as _i4.Future<_i12.DiaryFeedback?>);

  @override
  _i4.Future<void> insertDiaryFeedback(_i12.DiaryFeedback? feedback) =>
      (super.noSuchMethod(
            Invocation.method(#insertDiaryFeedback, [feedback]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDiaryFeedback(
    String? id,
    _i12.DiaryFeedback? feedback,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDiaryFeedback, [id, feedback]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDiaryFeedback(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDiaryFeedback, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [PaymentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentService extends _i1.Mock implements _i25.PaymentService {
  MockPaymentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i14.Payment>> fetchPayments({required String? profileId}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPayments, [], {#profileId: profileId}),
            returnValue: _i4.Future<List<_i14.Payment>>.value(<_i14.Payment>[]),
          )
          as _i4.Future<List<_i14.Payment>>);

  @override
  _i4.Future<_i14.Payment?> fetchPayment(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPayment, [id]),
            returnValue: _i4.Future<_i14.Payment?>.value(),
          )
          as _i4.Future<_i14.Payment?>);

  @override
  _i4.Future<void> insertPayment(_i14.Payment? payment) =>
      (super.noSuchMethod(
            Invocation.method(#insertPayment, [payment]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updatePayment(int? id, _i14.Payment? payment) =>
      (super.noSuchMethod(
            Invocation.method(#updatePayment, [id, payment]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deletePayment(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePayment, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [PlanService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlanService extends _i1.Mock implements _i26.PlanService {
  MockPlanService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i16.Plan>> fetchPlans() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPlans, []),
            returnValue: _i4.Future<List<_i16.Plan>>.value(<_i16.Plan>[]),
          )
          as _i4.Future<List<_i16.Plan>>);

  @override
  _i4.Future<_i16.Plan?> fetchPlan(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPlan, [id]),
            returnValue: _i4.Future<_i16.Plan?>.value(),
          )
          as _i4.Future<_i16.Plan?>);

  @override
  _i4.Future<void> insertPlan(_i16.Plan? plan) =>
      (super.noSuchMethod(
            Invocation.method(#insertPlan, [plan]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updatePlan(int? id, _i16.Plan? plan) =>
      (super.noSuchMethod(
            Invocation.method(#updatePlan, [id, plan]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deletePlan(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePlan, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SubscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionService extends _i1.Mock
    implements _i27.SubscriptionService {
  MockSubscriptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i18.Subscription>> fetchSubscriptions({
    required String? profileId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSubscriptions, [], {#profileId: profileId}),
            returnValue: _i4.Future<List<_i18.Subscription>>.value(
              <_i18.Subscription>[],
            ),
          )
          as _i4.Future<List<_i18.Subscription>>);

  @override
  _i4.Future<_i18.Subscription?> fetchSubscription(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSubscription, [id]),
            returnValue: _i4.Future<_i18.Subscription?>.value(),
          )
          as _i4.Future<_i18.Subscription?>);

  @override
  _i4.Future<void> insertSubscription(_i18.Subscription? subscription) =>
      (super.noSuchMethod(
            Invocation.method(#insertSubscription, [subscription]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateSubscription(
    int? id,
    _i18.Subscription? subscription,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateSubscription, [id, subscription]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSubscription(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSubscription, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i3.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FunctionsClient get functions =>
      (super.noSuchMethod(
            Invocation.getter(#functions),
            returnValue: _FakeFunctionsClient_3(
              this,
              Invocation.getter(#functions),
            ),
          )
          as _i3.FunctionsClient);

  @override
  _i3.SupabaseStorageClient get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeSupabaseStorageClient_4(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i3.SupabaseStorageClient);

  @override
  _i3.RealtimeClient get realtime =>
      (super.noSuchMethod(
            Invocation.getter(#realtime),
            returnValue: _FakeRealtimeClient_5(
              this,
              Invocation.getter(#realtime),
            ),
          )
          as _i3.RealtimeClient);

  @override
  _i3.PostgrestClient get rest =>
      (super.noSuchMethod(
            Invocation.getter(#rest),
            returnValue: _FakePostgrestClient_6(this, Invocation.getter(#rest)),
          )
          as _i3.PostgrestClient);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i3.GoTrueClient get auth =>
      (super.noSuchMethod(
            Invocation.getter(#auth),
            returnValue: _FakeGoTrueClient_7(this, Invocation.getter(#auth)),
          )
          as _i3.GoTrueClient);

  @override
  set functions(_i3.FunctionsClient? _functions) => super.noSuchMethod(
    Invocation.setter(#functions, _functions),
    returnValueForMissingStub: null,
  );

  @override
  set storage(_i3.SupabaseStorageClient? _storage) => super.noSuchMethod(
    Invocation.setter(#storage, _storage),
    returnValueForMissingStub: null,
  );

  @override
  set realtime(_i3.RealtimeClient? _realtime) => super.noSuchMethod(
    Invocation.setter(#realtime, _realtime),
    returnValueForMissingStub: null,
  );

  @override
  set rest(_i3.PostgrestClient? _rest) => super.noSuchMethod(
    Invocation.setter(#rest, _rest),
    returnValueForMissingStub: null,
  );

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
    Invocation.setter(#headers, headers),
    returnValueForMissingStub: null,
  );

  @override
  _i3.SupabaseQueryBuilder from(String? table) =>
      (super.noSuchMethod(
            Invocation.method(#from, [table]),
            returnValue: _FakeSupabaseQueryBuilder_8(
              this,
              Invocation.method(#from, [table]),
            ),
          )
          as _i3.SupabaseQueryBuilder);

  @override
  _i3.SupabaseQuerySchema schema(String? schema) =>
      (super.noSuchMethod(
            Invocation.method(#schema, [schema]),
            returnValue: _FakeSupabaseQuerySchema_9(
              this,
              Invocation.method(#schema, [schema]),
            ),
          )
          as _i3.SupabaseQuerySchema);

  @override
  _i3.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
    dynamic get = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#rpc, [fn], {#params: params, #get: get}),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#rpc, [fn], {#params: params, #get: get}),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.RealtimeChannel channel(
    String? name, {
    _i3.RealtimeChannelConfig? opts = const _i3.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#channel, [name], {#opts: opts}),
            returnValue: _FakeRealtimeChannel_11(
              this,
              Invocation.method(#channel, [name], {#opts: opts}),
            ),
          )
          as _i3.RealtimeChannel);

  @override
  List<_i3.RealtimeChannel> getChannels() =>
      (super.noSuchMethod(
            Invocation.method(#getChannels, []),
            returnValue: <_i3.RealtimeChannel>[],
          )
          as List<_i3.RealtimeChannel>);

  @override
  _i4.Future<String> removeChannel(_i3.RealtimeChannel? channel) =>
      (super.noSuchMethod(
            Invocation.method(#removeChannel, [channel]),
            returnValue: _i4.Future<String>.value(
              _i28.dummyValue<String>(
                this,
                Invocation.method(#removeChannel, [channel]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<List<String>> removeAllChannels() =>
      (super.noSuchMethod(
            Invocation.method(#removeAllChannels, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SupabaseQueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseQueryBuilder extends _i1.Mock
    implements _i3.SupabaseQueryBuilder {
  MockSupabaseQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SupabaseStreamFilterBuilder stream({required List<String>? primaryKey}) =>
      (super.noSuchMethod(
            Invocation.method(#stream, [], {#primaryKey: primaryKey}),
            returnValue: _FakeSupabaseStreamFilterBuilder_12(
              this,
              Invocation.method(#stream, [], {#primaryKey: primaryKey}),
            ),
          )
          as _i3.SupabaseStreamFilterBuilder);

  @override
  _i3.PostgrestFilterBuilder<List<Map<String, dynamic>>> select([
    String? columns = '*',
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#select, [columns]),
            returnValue:
                _FakePostgrestFilterBuilder_10<List<Map<String, dynamic>>>(
                  this,
                  Invocation.method(#select, [columns]),
                ),
          )
          as _i3.PostgrestFilterBuilder<List<Map<String, dynamic>>>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> insert(
    Object? values, {
    bool? defaultToNull = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #insert,
              [values],
              {#defaultToNull: defaultToNull},
            ),
            returnValue: _FakePostgrestFilterBuilder_10<dynamic>(
              this,
              Invocation.method(
                #insert,
                [values],
                {#defaultToNull: defaultToNull},
              ),
            ),
          )
          as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> upsert(
    Object? values, {
    String? onConflict,
    bool? ignoreDuplicates = false,
    bool? defaultToNull = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #upsert,
              [values],
              {
                #onConflict: onConflict,
                #ignoreDuplicates: ignoreDuplicates,
                #defaultToNull: defaultToNull,
              },
            ),
            returnValue: _FakePostgrestFilterBuilder_10<dynamic>(
              this,
              Invocation.method(
                #upsert,
                [values],
                {
                  #onConflict: onConflict,
                  #ignoreDuplicates: ignoreDuplicates,
                  #defaultToNull: defaultToNull,
                },
              ),
            ),
          )
          as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> update(Map<dynamic, dynamic>? values) =>
      (super.noSuchMethod(
            Invocation.method(#update, [values]),
            returnValue: _FakePostgrestFilterBuilder_10<dynamic>(
              this,
              Invocation.method(#update, [values]),
            ),
          )
          as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _FakePostgrestFilterBuilder_10<dynamic>(
              this,
              Invocation.method(#delete, []),
            ),
          )
          as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<int> count([
    _i3.CountOption? option = _i3.CountOption.exact,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#count, [option]),
            returnValue: _FakePostgrestFilterBuilder_10<int>(
              this,
              Invocation.method(#count, [option]),
            ),
          )
          as _i3.PostgrestFilterBuilder<int>);

  @override
  _i3.PostgrestQueryBuilder<dynamic> setHeader(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setHeader, [key, value]),
            returnValue: _FakePostgrestQueryBuilder_13<dynamic>(
              this,
              Invocation.method(#setHeader, [key, value]),
            ),
          )
          as _i3.PostgrestQueryBuilder<dynamic>);

  @override
  _i3.PostgrestBuilder<U, U, dynamic> withConverter<U>(
    _i3.PostgrestConverter<U, dynamic>? converter,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [converter]),
            returnValue: _FakePostgrestBuilder_14<U, U, dynamic>(
              this,
              Invocation.method(#withConverter, [converter]),
            ),
          )
          as _i3.PostgrestBuilder<U, U, dynamic>);

  @override
  Uri appendSearchParams(String? key, String? value, [Uri? url]) =>
      (super.noSuchMethod(
            Invocation.method(#appendSearchParams, [key, value, url]),
            returnValue: _FakeUri_15(
              this,
              Invocation.method(#appendSearchParams, [key, value, url]),
            ),
          )
          as Uri);

  @override
  Uri overrideSearchParams(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#overrideSearchParams, [key, value]),
            returnValue: _FakeUri_15(
              this,
              Invocation.method(#overrideSearchParams, [key, value]),
            ),
          )
          as Uri);

  @override
  _i4.Stream<dynamic> asStream() =>
      (super.noSuchMethod(
            Invocation.method(#asStream, []),
            returnValue: _i4.Stream<dynamic>.empty(),
          )
          as _i4.Stream<dynamic>);

  @override
  _i4.Future<dynamic> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#catchError, [onError], {#test: test}),
            returnValue: _i4.Future<dynamic>.value(),
          )
          as _i4.Future<dynamic>);

  @override
  _i4.Future<U> then<U>(
    _i4.FutureOr<U> Function(dynamic)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#then, [onValue], {#onError: onError}),
            returnValue:
                _i28.ifNotNull(
                  _i28.dummyValueOrNull<U>(
                    this,
                    Invocation.method(#then, [onValue], {#onError: onError}),
                  ),
                  (U v) => _i4.Future<U>.value(v),
                ) ??
                _FakeFuture_16<U>(
                  this,
                  Invocation.method(#then, [onValue], {#onError: onError}),
                ),
          )
          as _i4.Future<U>);

  @override
  _i4.Future<dynamic> timeout(
    Duration? timeLimit, {
    _i4.FutureOr<dynamic> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue: _i4.Future<dynamic>.value(),
          )
          as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> whenComplete(_i4.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#whenComplete, [action]),
            returnValue: _i4.Future<dynamic>.value(),
          )
          as _i4.Future<dynamic>);
}

/// A class which mocks [PostgrestFilterBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestFilterBuilder<T> extends _i1.Mock
    implements _i3.PostgrestFilterBuilder<T> {
  MockPostgrestFilterBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PostgrestFilterBuilder<T> copyWithUrl(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#copyWithUrl, [url]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#copyWithUrl, [url]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> not(
    String? column,
    String? operator,
    Object? value,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#not, [column, operator, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#not, [column, operator, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> or(
    String? filters, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #or,
              [filters],
              {#referencedTable: referencedTable},
            ),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(
                #or,
                [filters],
                {#referencedTable: referencedTable},
              ),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> eq(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#eq, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#eq, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> neq(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#neq, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#neq, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> gt(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#gt, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#gt, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> gte(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#gte, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#gte, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> lt(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#lt, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#lt, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> lte(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#lte, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#lte, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> like(String? column, String? pattern) =>
      (super.noSuchMethod(
            Invocation.method(#like, [column, pattern]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#like, [column, pattern]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> likeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#likeAllOf, [column, patterns]),
            returnValue: _FakePostgrestFilterBuilder_10<dynamic>(
              this,
              Invocation.method(#likeAllOf, [column, patterns]),
            ),
          )
          as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> likeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#likeAnyOf, [column, patterns]),
            returnValue: _FakePostgrestFilterBuilder_10<dynamic>(
              this,
              Invocation.method(#likeAnyOf, [column, patterns]),
            ),
          )
          as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<T> ilike(String? column, String? pattern) =>
      (super.noSuchMethod(
            Invocation.method(#ilike, [column, pattern]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#ilike, [column, pattern]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> ilikeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#ilikeAllOf, [column, patterns]),
            returnValue: _FakePostgrestFilterBuilder_10<dynamic>(
              this,
              Invocation.method(#ilikeAllOf, [column, patterns]),
            ),
          )
          as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> ilikeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#ilikeAnyOf, [column, patterns]),
            returnValue: _FakePostgrestFilterBuilder_10<dynamic>(
              this,
              Invocation.method(#ilikeAnyOf, [column, patterns]),
            ),
          )
          as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<T> isFilter(String? column, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#isFilter, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#isFilter, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> inFilter(
    String? column,
    List<dynamic>? values,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#inFilter, [column, values]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#inFilter, [column, values]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> contains(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#contains, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> containedBy(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#containedBy, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#containedBy, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeLt(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeLt, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#rangeLt, [column, range]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeGt(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeGt, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#rangeGt, [column, range]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeGte(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeGte, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#rangeGte, [column, range]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeLte(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeLte, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#rangeLte, [column, range]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeAdjacent(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeAdjacent, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#rangeAdjacent, [column, range]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> overlaps(String? column, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#overlaps, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#overlaps, [column, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> textSearch(
    String? column,
    String? query, {
    String? config,
    _i3.TextSearchType? type,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #textSearch,
              [column, query],
              {#config: config, #type: type},
            ),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(
                #textSearch,
                [column, query],
                {#config: config, #type: type},
              ),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> filter(
    String? column,
    String? operator,
    Object? value,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#filter, [column, operator, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#filter, [column, operator, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> match(Map<String, Object>? query) =>
      (super.noSuchMethod(
            Invocation.method(#match, [query]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#match, [query]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> setHeader(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setHeader, [key, value]),
            returnValue: _FakePostgrestFilterBuilder_10<T>(
              this,
              Invocation.method(#setHeader, [key, value]),
            ),
          )
          as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<List<Map<String, dynamic>>> select([
    String? columns = '*',
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#select, [columns]),
            returnValue:
                _FakePostgrestTransformBuilder_17<List<Map<String, dynamic>>>(
                  this,
                  Invocation.method(#select, [columns]),
                ),
          )
          as _i3.PostgrestTransformBuilder<List<Map<String, dynamic>>>);

  @override
  _i3.PostgrestTransformBuilder<T> order(
    String? column, {
    bool? ascending = false,
    bool? nullsFirst = false,
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #order,
              [column],
              {
                #ascending: ascending,
                #nullsFirst: nullsFirst,
                #referencedTable: referencedTable,
              },
            ),
            returnValue: _FakePostgrestTransformBuilder_17<T>(
              this,
              Invocation.method(
                #order,
                [column],
                {
                  #ascending: ascending,
                  #nullsFirst: nullsFirst,
                  #referencedTable: referencedTable,
                },
              ),
            ),
          )
          as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<T> limit(
    int? count, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #limit,
              [count],
              {#referencedTable: referencedTable},
            ),
            returnValue: _FakePostgrestTransformBuilder_17<T>(
              this,
              Invocation.method(
                #limit,
                [count],
                {#referencedTable: referencedTable},
              ),
            ),
          )
          as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<T> range(
    int? from,
    int? to, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #range,
              [from, to],
              {#referencedTable: referencedTable},
            ),
            returnValue: _FakePostgrestTransformBuilder_17<T>(
              this,
              Invocation.method(
                #range,
                [from, to],
                {#referencedTable: referencedTable},
              ),
            ),
          )
          as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<Map<String, dynamic>> single() =>
      (super.noSuchMethod(
            Invocation.method(#single, []),
            returnValue:
                _FakePostgrestTransformBuilder_17<Map<String, dynamic>>(
                  this,
                  Invocation.method(#single, []),
                ),
          )
          as _i3.PostgrestTransformBuilder<Map<String, dynamic>>);

  @override
  _i3.PostgrestTransformBuilder<Map<String, dynamic>?> maybeSingle() =>
      (super.noSuchMethod(
            Invocation.method(#maybeSingle, []),
            returnValue:
                _FakePostgrestTransformBuilder_17<Map<String, dynamic>?>(
                  this,
                  Invocation.method(#maybeSingle, []),
                ),
          )
          as _i3.PostgrestTransformBuilder<Map<String, dynamic>?>);

  @override
  _i3.PostgrestTransformBuilder<String> csv() =>
      (super.noSuchMethod(
            Invocation.method(#csv, []),
            returnValue: _FakePostgrestTransformBuilder_17<String>(
              this,
              Invocation.method(#csv, []),
            ),
          )
          as _i3.PostgrestTransformBuilder<String>);

  @override
  _i3.ResponsePostgrestBuilder<_i3.PostgrestResponse<T>, T, T> count([
    _i3.CountOption? count = _i3.CountOption.exact,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#count, [count]),
            returnValue: _FakeResponsePostgrestBuilder_18<
              _i3.PostgrestResponse<T>,
              T,
              T
            >(this, Invocation.method(#count, [count])),
          )
          as _i3.ResponsePostgrestBuilder<_i3.PostgrestResponse<T>, T, T>);

  @override
  _i3.PostgrestBuilder<void, void, void> head() =>
      (super.noSuchMethod(
            Invocation.method(#head, []),
            returnValue: _FakePostgrestBuilder_14<void, void, void>(
              this,
              Invocation.method(#head, []),
            ),
          )
          as _i3.PostgrestBuilder<void, void, void>);

  @override
  _i3.ResponsePostgrestBuilder<
    Map<String, dynamic>,
    Map<String, dynamic>,
    Map<String, dynamic>
  >
  geojson() =>
      (super.noSuchMethod(
            Invocation.method(#geojson, []),
            returnValue: _FakeResponsePostgrestBuilder_18<
              Map<String, dynamic>,
              Map<String, dynamic>,
              Map<String, dynamic>
            >(this, Invocation.method(#geojson, [])),
          )
          as _i3.ResponsePostgrestBuilder<
            Map<String, dynamic>,
            Map<String, dynamic>,
            Map<String, dynamic>
          >);

  @override
  _i3.PostgrestBuilder<String, String, String> explain({
    bool? analyze = false,
    bool? verbose = false,
    bool? settings = false,
    bool? buffers = false,
    bool? wal = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#explain, [], {
              #analyze: analyze,
              #verbose: verbose,
              #settings: settings,
              #buffers: buffers,
              #wal: wal,
            }),
            returnValue: _FakePostgrestBuilder_14<String, String, String>(
              this,
              Invocation.method(#explain, [], {
                #analyze: analyze,
                #verbose: verbose,
                #settings: settings,
                #buffers: buffers,
                #wal: wal,
              }),
            ),
          )
          as _i3.PostgrestBuilder<String, String, String>);

  @override
  _i3.PostgrestBuilder<U, U, T> withConverter<U>(
    _i3.PostgrestConverter<U, T>? converter,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [converter]),
            returnValue: _FakePostgrestBuilder_14<U, U, T>(
              this,
              Invocation.method(#withConverter, [converter]),
            ),
          )
          as _i3.PostgrestBuilder<U, U, T>);

  @override
  Uri appendSearchParams(String? key, String? value, [Uri? url]) =>
      (super.noSuchMethod(
            Invocation.method(#appendSearchParams, [key, value, url]),
            returnValue: _FakeUri_15(
              this,
              Invocation.method(#appendSearchParams, [key, value, url]),
            ),
          )
          as Uri);

  @override
  Uri overrideSearchParams(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#overrideSearchParams, [key, value]),
            returnValue: _FakeUri_15(
              this,
              Invocation.method(#overrideSearchParams, [key, value]),
            ),
          )
          as Uri);

  @override
  _i4.Stream<T> asStream() =>
      (super.noSuchMethod(
            Invocation.method(#asStream, []),
            returnValue: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.Future<T> catchError(Function? onError, {bool Function(Object)? test}) =>
      (super.noSuchMethod(
            Invocation.method(#catchError, [onError], {#test: test}),
            returnValue:
                _i28.ifNotNull(
                  _i28.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#catchError, [onError], {#test: test}),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(
                  this,
                  Invocation.method(#catchError, [onError], {#test: test}),
                ),
          )
          as _i4.Future<T>);

  @override
  _i4.Future<U> then<U>(
    _i4.FutureOr<U> Function(T)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#then, [onValue], {#onError: onError}),
            returnValue:
                _i28.ifNotNull(
                  _i28.dummyValueOrNull<U>(
                    this,
                    Invocation.method(#then, [onValue], {#onError: onError}),
                  ),
                  (U v) => _i4.Future<U>.value(v),
                ) ??
                _FakeFuture_16<U>(
                  this,
                  Invocation.method(#then, [onValue], {#onError: onError}),
                ),
          )
          as _i4.Future<U>);

  @override
  _i4.Future<T> timeout(
    Duration? timeLimit, {
    _i4.FutureOr<T> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue:
                _i28.ifNotNull(
                  _i28.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #timeout,
                      [timeLimit],
                      {#onTimeout: onTimeout},
                    ),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(
                  this,
                  Invocation.method(
                    #timeout,
                    [timeLimit],
                    {#onTimeout: onTimeout},
                  ),
                ),
          )
          as _i4.Future<T>);

  @override
  _i4.Future<T> whenComplete(_i4.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#whenComplete, [action]),
            returnValue:
                _i28.ifNotNull(
                  _i28.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#whenComplete, [action]),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(
                  this,
                  Invocation.method(#whenComplete, [action]),
                ),
          )
          as _i4.Future<T>);
}

/// A class which mocks [GoTrueClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoTrueClient extends _i1.Mock implements _i3.GoTrueClient {
  MockGoTrueClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GoTrueAdminApi get admin =>
      (super.noSuchMethod(
            Invocation.getter(#admin),
            returnValue: _FakeGoTrueAdminApi_19(
              this,
              Invocation.getter(#admin),
            ),
          )
          as _i3.GoTrueAdminApi);

  @override
  _i3.GoTrueMFAApi get mfa =>
      (super.noSuchMethod(
            Invocation.getter(#mfa),
            returnValue: _FakeGoTrueMFAApi_20(this, Invocation.getter(#mfa)),
          )
          as _i3.GoTrueMFAApi);

  @override
  _i4.Stream<_i3.AuthState> get onAuthStateChange =>
      (super.noSuchMethod(
            Invocation.getter(#onAuthStateChange),
            returnValue: _i4.Stream<_i3.AuthState>.empty(),
          )
          as _i4.Stream<_i3.AuthState>);

  @override
  _i4.Stream<_i3.AuthState> get onAuthStateChangeSync =>
      (super.noSuchMethod(
            Invocation.getter(#onAuthStateChangeSync),
            returnValue: _i4.Stream<_i3.AuthState>.empty(),
          )
          as _i4.Stream<_i3.AuthState>);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  set admin(_i3.GoTrueAdminApi? _admin) => super.noSuchMethod(
    Invocation.setter(#admin, _admin),
    returnValueForMissingStub: null,
  );

  @override
  set mfa(_i3.GoTrueMFAApi? _mfa) => super.noSuchMethod(
    Invocation.setter(#mfa, _mfa),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i3.AuthResponse> signInAnonymously({
    Map<String, dynamic>? data,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, [], {
              #data: data,
              #captchaToken: captchaToken,
            }),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#signInAnonymously, [], {
                  #data: data,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<_i3.AuthResponse> signUp({
    String? email,
    String? phone,
    required String? password,
    String? emailRedirectTo,
    Map<String, dynamic>? data,
    String? captchaToken,
    _i3.OtpChannel? channel = _i3.OtpChannel.sms,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [], {
              #email: email,
              #phone: phone,
              #password: password,
              #emailRedirectTo: emailRedirectTo,
              #data: data,
              #captchaToken: captchaToken,
              #channel: channel,
            }),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#signUp, [], {
                  #email: email,
                  #phone: phone,
                  #password: password,
                  #emailRedirectTo: emailRedirectTo,
                  #data: data,
                  #captchaToken: captchaToken,
                  #channel: channel,
                }),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<_i3.AuthResponse> signInWithPassword({
    String? email,
    String? phone,
    required String? password,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPassword, [], {
              #email: email,
              #phone: phone,
              #password: password,
              #captchaToken: captchaToken,
            }),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#signInWithPassword, [], {
                  #email: email,
                  #phone: phone,
                  #password: password,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<_i3.OAuthResponse> getOAuthSignInUrl({
    required _i3.OAuthProvider? provider,
    String? redirectTo,
    String? scopes,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getOAuthSignInUrl, [], {
              #provider: provider,
              #redirectTo: redirectTo,
              #scopes: scopes,
              #queryParams: queryParams,
            }),
            returnValue: _i4.Future<_i3.OAuthResponse>.value(
              _FakeOAuthResponse_21(
                this,
                Invocation.method(#getOAuthSignInUrl, [], {
                  #provider: provider,
                  #redirectTo: redirectTo,
                  #scopes: scopes,
                  #queryParams: queryParams,
                }),
              ),
            ),
          )
          as _i4.Future<_i3.OAuthResponse>);

  @override
  _i4.Future<_i3.AuthSessionUrlResponse> exchangeCodeForSession(
    String? authCode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#exchangeCodeForSession, [authCode]),
            returnValue: _i4.Future<_i3.AuthSessionUrlResponse>.value(
              _FakeAuthSessionUrlResponse_22(
                this,
                Invocation.method(#exchangeCodeForSession, [authCode]),
              ),
            ),
          )
          as _i4.Future<_i3.AuthSessionUrlResponse>);

  @override
  _i4.Future<_i3.AuthResponse> signInWithIdToken({
    required _i3.OAuthProvider? provider,
    required String? idToken,
    String? accessToken,
    String? nonce,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithIdToken, [], {
              #provider: provider,
              #idToken: idToken,
              #accessToken: accessToken,
              #nonce: nonce,
              #captchaToken: captchaToken,
            }),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#signInWithIdToken, [], {
                  #provider: provider,
                  #idToken: idToken,
                  #accessToken: accessToken,
                  #nonce: nonce,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<void> signInWithOtp({
    String? email,
    String? phone,
    String? emailRedirectTo,
    bool? shouldCreateUser,
    Map<String, dynamic>? data,
    String? captchaToken,
    _i3.OtpChannel? channel = _i3.OtpChannel.sms,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithOtp, [], {
              #email: email,
              #phone: phone,
              #emailRedirectTo: emailRedirectTo,
              #shouldCreateUser: shouldCreateUser,
              #data: data,
              #captchaToken: captchaToken,
              #channel: channel,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i3.AuthResponse> verifyOTP({
    String? email,
    String? phone,
    String? token,
    required _i3.OtpType? type,
    String? redirectTo,
    String? captchaToken,
    String? tokenHash,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyOTP, [], {
              #email: email,
              #phone: phone,
              #token: token,
              #type: type,
              #redirectTo: redirectTo,
              #captchaToken: captchaToken,
              #tokenHash: tokenHash,
            }),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#verifyOTP, [], {
                  #email: email,
                  #phone: phone,
                  #token: token,
                  #type: type,
                  #redirectTo: redirectTo,
                  #captchaToken: captchaToken,
                  #tokenHash: tokenHash,
                }),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<String> getSSOSignInUrl({
    String? providerId,
    String? domain,
    String? redirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSSOSignInUrl, [], {
              #providerId: providerId,
              #domain: domain,
              #redirectTo: redirectTo,
              #captchaToken: captchaToken,
            }),
            returnValue: _i4.Future<String>.value(
              _i28.dummyValue<String>(
                this,
                Invocation.method(#getSSOSignInUrl, [], {
                  #providerId: providerId,
                  #domain: domain,
                  #redirectTo: redirectTo,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i3.AuthResponse> refreshSession([String? refreshToken]) =>
      (super.noSuchMethod(
            Invocation.method(#refreshSession, [refreshToken]),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#refreshSession, [refreshToken]),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<void> reauthenticate() =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticate, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i3.ResendResponse> resend({
    String? email,
    String? phone,
    required _i3.OtpType? type,
    String? emailRedirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#resend, [], {
              #email: email,
              #phone: phone,
              #type: type,
              #emailRedirectTo: emailRedirectTo,
              #captchaToken: captchaToken,
            }),
            returnValue: _i4.Future<_i3.ResendResponse>.value(
              _FakeResendResponse_23(
                this,
                Invocation.method(#resend, [], {
                  #email: email,
                  #phone: phone,
                  #type: type,
                  #emailRedirectTo: emailRedirectTo,
                  #captchaToken: captchaToken,
                }),
              ),
            ),
          )
          as _i4.Future<_i3.ResendResponse>);

  @override
  _i4.Future<_i3.UserResponse> getUser([String? jwt]) =>
      (super.noSuchMethod(
            Invocation.method(#getUser, [jwt]),
            returnValue: _i4.Future<_i3.UserResponse>.value(
              _FakeUserResponse_24(this, Invocation.method(#getUser, [jwt])),
            ),
          )
          as _i4.Future<_i3.UserResponse>);

  @override
  _i4.Future<_i3.UserResponse> updateUser(
    _i3.UserAttributes? attributes, {
    String? emailRedirectTo,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateUser,
              [attributes],
              {#emailRedirectTo: emailRedirectTo},
            ),
            returnValue: _i4.Future<_i3.UserResponse>.value(
              _FakeUserResponse_24(
                this,
                Invocation.method(
                  #updateUser,
                  [attributes],
                  {#emailRedirectTo: emailRedirectTo},
                ),
              ),
            ),
          )
          as _i4.Future<_i3.UserResponse>);

  @override
  _i4.Future<_i3.AuthResponse> setSession(String? refreshToken) =>
      (super.noSuchMethod(
            Invocation.method(#setSession, [refreshToken]),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#setSession, [refreshToken]),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  _i4.Future<_i3.AuthSessionUrlResponse> getSessionFromUrl(
    Uri? originUrl, {
    bool? storeSession = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getSessionFromUrl,
              [originUrl],
              {#storeSession: storeSession},
            ),
            returnValue: _i4.Future<_i3.AuthSessionUrlResponse>.value(
              _FakeAuthSessionUrlResponse_22(
                this,
                Invocation.method(
                  #getSessionFromUrl,
                  [originUrl],
                  {#storeSession: storeSession},
                ),
              ),
            ),
          )
          as _i4.Future<_i3.AuthSessionUrlResponse>);

  @override
  _i4.Future<void> signOut({
    _i3.SignOutScope? scope = _i3.SignOutScope.local,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signOut, [], {#scope: scope}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> resetPasswordForEmail(
    String? email, {
    String? redirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #resetPasswordForEmail,
              [email],
              {#redirectTo: redirectTo, #captchaToken: captchaToken},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i3.UserIdentity>> getUserIdentities() =>
      (super.noSuchMethod(
            Invocation.method(#getUserIdentities, []),
            returnValue: _i4.Future<List<_i3.UserIdentity>>.value(
              <_i3.UserIdentity>[],
            ),
          )
          as _i4.Future<List<_i3.UserIdentity>>);

  @override
  _i4.Future<_i3.OAuthResponse> getLinkIdentityUrl(
    _i3.OAuthProvider? provider, {
    String? redirectTo,
    String? scopes,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getLinkIdentityUrl,
              [provider],
              {
                #redirectTo: redirectTo,
                #scopes: scopes,
                #queryParams: queryParams,
              },
            ),
            returnValue: _i4.Future<_i3.OAuthResponse>.value(
              _FakeOAuthResponse_21(
                this,
                Invocation.method(
                  #getLinkIdentityUrl,
                  [provider],
                  {
                    #redirectTo: redirectTo,
                    #scopes: scopes,
                    #queryParams: queryParams,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i3.OAuthResponse>);

  @override
  _i4.Future<void> unlinkIdentity(_i3.UserIdentity? identity) =>
      (super.noSuchMethod(
            Invocation.method(#unlinkIdentity, [identity]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setInitialSession(String? jsonStr) =>
      (super.noSuchMethod(
            Invocation.method(#setInitialSession, [jsonStr]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i3.AuthResponse> recoverSession(String? jsonStr) =>
      (super.noSuchMethod(
            Invocation.method(#recoverSession, [jsonStr]),
            returnValue: _i4.Future<_i3.AuthResponse>.value(
              _FakeAuthResponse_2(
                this,
                Invocation.method(#recoverSession, [jsonStr]),
              ),
            ),
          )
          as _i4.Future<_i3.AuthResponse>);

  @override
  void startAutoRefresh() => super.noSuchMethod(
    Invocation.method(#startAutoRefresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopAutoRefresh() => super.noSuchMethod(
    Invocation.method(#stopAutoRefresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyAllSubscribers(
    _i3.AuthChangeEvent? event, {
    _i3.Session? session,
    bool? broadcast = true,
  }) => super.noSuchMethod(
    Invocation.method(
      #notifyAllSubscribers,
      [event],
      {#session: session, #broadcast: broadcast},
    ),
    returnValueForMissingStub: null,
  );

  @override
  Object notifyException(Object? exception, [StackTrace? stackTrace]) =>
      (super.noSuchMethod(
            Invocation.method(#notifyException, [exception, stackTrace]),
            returnValue: _FakeObject_25(
              this,
              Invocation.method(#notifyException, [exception, stackTrace]),
            ),
          )
          as Object);
}
